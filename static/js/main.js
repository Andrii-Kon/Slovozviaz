import { fetchRankedWords, submitGuess } from "./api.js";
import { renderGuesses, createGuessItem } from "./ui.js";

let isGoingUp = false;
let allowedWords = new Set();
let guessCount = 0;
let bestRank = Infinity;
let rankedWords = [];
let guesses = [];
let lastWord = null;
let MAX_RANK = 0;
let dayNumber = null;
let currentGameDate = null;

function getNextHintRank(bestRank, guesses, rankedWords, maxRank) {
    if (bestRank === Infinity) {
        const wordObj = rankedWords.find(x => x.rank === 500);
        if (wordObj) return 500;
        return null;
    }
    if (bestRank === 1) return null;

    const isGuessed = r => guesses.some(g => g.rank === r);
    if (!isGoingUp) {
        if (bestRank > 2) {
            let candidate = Math.floor(bestRank / 2);
            while (candidate >= 2) {
                if (!isGuessed(candidate)) return candidate;
                candidate = Math.floor(candidate / 2);
            }
            if (!isGuessed(2)) return 2;
            isGoingUp = true;
        }
        if (bestRank === 2) isGoingUp = true;
    }
    let bigger = bestRank + 1;
    while (bigger <= maxRank) {
        if (!isGuessed(bigger)) return bigger;
        bigger++;
    }
    return null;
}

function computeGameNumber(dateStr) {
    const baseDate = new Date(2025, 2, 31);
    const [year, month, day] = dateStr.split("-").map(Number);
    const currentDate = new Date(year, month - 1, day);
    const diffMs = currentDate - baseDate;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    return diffDays + 1;
}

// –§—É–Ω–∫—Ü—ñ—è updateGameDateLabel –æ–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –ø—ñ–¥–ø–∏—Å—É –≥—Ä–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ "–ì—Ä–∞ ‚ÑñX"
function updateGameDateLabel() {
    const label = document.getElementById("gameDateLabel");
    label.textContent = `–ì—Ä–∞: #${ currentGameDate ? computeGameNumber(currentGameDate) : dayNumber }`;
}

async function fetchAllowedWords() {
    try {
        const response = await fetch("/api/wordlist");
        const data = await response.json();
        allowedWords = new Set(data.map(word => word.toLowerCase()));
    } catch (err) {
        console.error("[Error] Failed to fetch allowed words:", err);
    }
}

document.addEventListener("DOMContentLoaded", async () => {
    await fetchAllowedWords();

    const guessInput = document.getElementById("guessInput");
    const submitGuessBtn = document.getElementById("submitGuess");
    const guessesContainer = document.getElementById("guessesContainer");
    const guessCountElem = document.getElementById("guessCount");
    const lastGuessWrapper = document.getElementById("lastGuessWrapper");
    const lastGuessDisplay = document.getElementById("lastGuessDisplay");
    const howToPlayBlock = document.getElementById("howToPlayBlock");
    const closestWordsBtn = document.getElementById("closestWordsBtn");

    // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    const hintButton = document.getElementById("hintButton");
    const previousGamesBtn = document.getElementById("previousGamesBtn");
    const giveUpBtn = document.getElementById("giveUpBtn");

    // –ú–æ–¥–∞–ª–∫–∞ "–ó–¥–∞—Ç–∏—Å—è"
    const giveUpModal = document.getElementById("giveUpModal");
    const closeGiveUpModal = document.getElementById("closeGiveUpModal");
    const giveUpYesBtn = document.getElementById("giveUpYesBtn");
    const giveUpNoBtn = document.getElementById("giveUpNoBtn");

    // –ú–æ–¥–∞–ª–∫–∞ "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–≥—Ä–∏"
    const previousGamesModal = document.getElementById("previousGamesModal");
    const closePreviousGamesModal = document.getElementById("closePreviousGamesModal");
    const previousGamesList = document.getElementById("previousGamesList");
    const randomGameBtn = document.getElementById("randomGameBtn");
    randomGameBtn.textContent = "üîÄ Random";

    // –ú–æ–¥–∞–ª–∫–∞ "Closest words"
    const closestWordsModal = document.getElementById("closestWordsModal");
    const closeModalBtn = document.getElementById("closeModalBtn");

    try {
        const response = await fetch("/api/daily-index");
        const dailyIndexData = await response.json();
        dayNumber = dailyIndexData.game_number;
    } catch (err) {
        console.error("[Error] Failed to fetch daily index:", err);
    }

    try {
        rankedWords = await fetchRankedWords();
    } catch (err) {
        console.error("[Error] fetchRankedWords failed:", err);
    }
    MAX_RANK = rankedWords.length;
    updateGameDateLabel();

    async function loadArchive(game_date) {
        try {
            const response = await fetch(`/archive/${game_date}`);
            if (!response.ok) return alert("–ê—Ä—Ö—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏");
            const archiveData = await response.json();
            rankedWords = archiveData.ranking;
            MAX_RANK = rankedWords.length;
            guesses = [];
            guessCount = 0;
            guessCountElem.textContent = 0;
            currentGameDate = game_date;
            updateGameDateLabel();
        } catch (err) {
            console.error("Error loading archive for date", game_date, err);
            alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É");
        }
    }

    async function handleSubmit() {
        const word = guessInput.value.trim().toLowerCase();
        if (!word) return;
        if (guesses.some(g => g.word === word)) return alert(`–°–ª–æ–≤–æ "${word}" —É–∂–µ –≤–≥–∞–¥–∞–ª–∏`);
        if (!allowedWords.has(word)) return alert("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞");
        if (howToPlayBlock && howToPlayBlock.style.display !== "none") howToPlayBlock.style.display = "none";

        let data;
        if (currentGameDate) {
            const match = rankedWords.find(item => item.word === word);
            data = match ? { rank: match.rank } : { error: "–¶—å–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –±—É–ª–æ –≤ –≥—Ä—ñ —Ü—å–æ–≥–æ –¥–Ω—è." };
        } else {
            try {
                const response = await fetch("/guess", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ word })
                });
                data = await response.json();
            } catch (err) {
                console.error("[Error] submitGuess failed:", err);
                return;
            }
        }

        guessCount++;
        guessCountElem.textContent = guessCount;
        lastWord = word;

        if (data.error) {
            guesses.push({ word, rank: Infinity, error: true, errorMessage: data.error });
        } else {
            guesses.push({ word, rank: data.rank, error: false });
            if (data.rank < bestRank) bestRank = data.rank;
            if (data.rank === 1) {
                endGameAsWin();
            }
        }

        renderGuesses(guesses, lastWord, MAX_RANK, guessesContainer, lastGuessWrapper, lastGuessDisplay);
        guessInput.value = "";
        guessInput.focus();
    }

    // –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–≤–µ—Ä—à—É—î –≥—Ä—É —è–∫ –ø–µ—Ä–µ–º–æ–≥—É
    function endGameAsWin() {
        const congratsBlock = document.getElementById("congratsBlock");
        if (congratsBlock) congratsBlock.classList.remove("hidden");
        const guessesUsedElem = document.getElementById("guessesUsed");
        if (guessesUsedElem) guessesUsedElem.textContent = guessCount;
        const gameNumberElem = document.getElementById("gameNumber");
        if (gameNumberElem) {
            gameNumberElem.textContent = currentGameDate ? computeGameNumber(currentGameDate) : dayNumber;
        }
        guessInput.disabled = true;
        submitGuessBtn.disabled = true;
        if (hintButton) hintButton.disabled = true;
        closestWordsBtn.classList.remove("hidden");
    }

    guessInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") handleSubmit();
    });
    submitGuessBtn.addEventListener("click", handleSubmit);

    hintButton.addEventListener("click", () => {
        if (howToPlayBlock && howToPlayBlock.style.display !== "none")
            howToPlayBlock.style.display = "none";
        if (rankedWords.length === 0)
            return alert("–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π!");
        const nextHintRank = getNextHintRank(bestRank, guesses, rankedWords, MAX_RANK);
        if (!nextHintRank)
            return alert("–ù–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–æ—ó –ø—ñ–¥–∫–∞–∑–∫–∏.");
        const hintWordObj = rankedWords.find(item => item.rank === nextHintRank);
        if (!hintWordObj)
            return alert("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ –∑ —Ä–∞–Ω–≥—É " + nextHintRank);
        lastWord = hintWordObj.word;
        guesses.push({ word: hintWordObj.word, rank: hintWordObj.rank, error: false });
        if (hintWordObj.rank < bestRank) bestRank = hintWordObj.rank;
        renderGuesses(guesses, lastWord, MAX_RANK, guessesContainer, lastGuessWrapper, lastGuessDisplay);
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤–∏–ø–∞–¥–∞—é—á–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥–∫–∞–∑–∫—É
        dropdownMenu.classList.add("hidden");
    });
    // --- –õ–æ–≥—ñ–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ "–ó–¥–∞—Ç–∏—Å—è" ---
    giveUpBtn.addEventListener("click", () => {
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ "Are you sure you want to give up?"
        giveUpModal.classList.remove("hidden");
    });

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "Yes" -> —Ä–æ–±–∏–º–æ –≤–∏–≥–ª—è–¥, —â–æ –≤—ñ–Ω "–≤–≥–∞–¥–∞–≤" —Å–µ–∫—Ä–µ—Ç–Ω–µ —Å–ª–æ–≤–æ
    giveUpYesBtn.addEventListener("click", () => {
        if (rankedWords.length > 0) {
            // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ –∑—ñ —Å–ø–∏—Å–∫—É (rank=1 –∑–∞–∑–≤–∏—á–∞–π —ñ–¥–µ –≤ rankedWords[0], –∞–ª–µ –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è)
            const secretWordObj = rankedWords.find(item => item.rank === 1);
            if (!secretWordObj) {
                // –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ rank=1 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–∑—å–º–µ–º–æ –≤—Å–µ –æ–¥–Ω–æ rankedWords[0]
                // —ñ –≤–≤–∞–∂–∞—Ç–∏–º–µ–º–æ, —â–æ —Ü–µ —Å–µ–∫—Ä–µ—Ç–Ω–µ —Å–ª–æ–≤–æ
                guesses.push({ word: rankedWords[0].word, rank: 1, error: false });
            } else {
                guesses.push({ word: secretWordObj.word, rank: 1, error: false });
            }
            bestRank = 1;
            guessCount++;
            guessCountElem.textContent = guessCount;
            renderGuesses(guesses, lastWord, MAX_RANK, guessesContainer, lastGuessWrapper, lastGuessDisplay);
            endGameAsWin();
        }
        giveUpModal.classList.add("hidden");
    });

    // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–∫–∞—î "No" –∞–±–æ —Ö—Ä–µ—Å—Ç–∏–∫ -> –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª–∫—É
    giveUpNoBtn.addEventListener("click", () => {
        giveUpModal.classList.add("hidden");
    });
    closeGiveUpModal.addEventListener("click", () => {
        giveUpModal.classList.add("hidden");
    });

    // --- –ö—ñ–Ω–µ—Ü—å –ª–æ–≥—ñ–∫–∏ "–ó–¥–∞—Ç–∏—Å—è" ---

    previousGamesBtn.addEventListener("click", async () => {
        try {
            const response = await fetch("/archive");
            const dates = await response.json();
            previousGamesList.innerHTML = "";
            const today = new Date().toLocaleDateString('en-CA');
            dates.forEach(dateStr => {
                if (dateStr > today) return;
                const gameNumber = computeGameNumber(dateStr);
                const btn = document.createElement("button");
                btn.textContent = `–ì—Ä–∞ #${gameNumber}`;
                btn.addEventListener("click", () => {
                    loadArchive(dateStr);
                    previousGamesModal.classList.add("hidden");
                });
                previousGamesList.appendChild(btn);
            });
            previousGamesModal.classList.remove("hidden");
        } catch (err) {
            console.error("[Error] Failed to fetch archive list:", err);
            previousGamesList.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É</p>";
            previousGamesModal.classList.remove("hidden");
        }
    });

    closePreviousGamesModal.addEventListener("click", () => {
        previousGamesModal.classList.add("hidden");
    });

    randomGameBtn.addEventListener("click", async () => {
        try {
            const response = await fetch("/archive");
            const dates = await response.json();
            const today = new Date().toISOString().split("T")[0];
            const validDates = dates.filter(date => date <= today);
            if (validDates.length === 0) return alert("–ù–µ–º–∞—î –∞—Ä—Ö—ñ–≤—ñ–≤");
            const randomDate = validDates[Math.floor(Math.random() * validDates.length)];
            await loadArchive(randomDate);
            previousGamesModal.classList.add("hidden");
        } catch (err) {
            console.error("[Error] Random game:", err);
        }
    });

    function showClosestWords() {
        const closestWordsList = document.getElementById("closestWordsList");
        closestWordsList.innerHTML = "";
        const top500 = rankedWords.slice(0, 500);
        top500.forEach(item => {
            const guessItem = createGuessItem(
                { word: item.word, rank: item.rank, error: false },
                MAX_RANK
            );
            closestWordsList.appendChild(guessItem);
        });
        closestWordsModal.classList.remove("hidden");
    }

    closestWordsBtn.addEventListener("click", showClosestWords);
    closeModalBtn.addEventListener("click", () => {
        closestWordsModal.classList.add("hidden");
    });

    // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é (‚ãÆ)
    const menuButton = document.getElementById("menuButton");
    const dropdownMenu = document.getElementById("dropdownMenu");
    menuButton.addEventListener("click", (event) => {
        event.stopPropagation();
        dropdownMenu.classList.toggle("hidden");
    });
    document.addEventListener("click", (event) => {
        if (!menuButton.contains(event.target) && !dropdownMenu.contains(event.target)) {
            dropdownMenu.classList.add("hidden");
        }
    });
});
